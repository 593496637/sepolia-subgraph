// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class TransferRecord extends ethereum.Event {
  get params(): TransferRecord__Params {
    return new TransferRecord__Params(this);
  }
}

export class TransferRecord__Params {
  _event: TransferRecord;

  constructor(event: TransferRecord) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get message(): string {
    return this._event.parameters[4].value.toString();
  }

  get recordId(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }
}

export class SimpleTransferContract__getContractInfoResult {
  value0: BigInt;
  value1: Address;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: Address, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  get_totalRecords(): BigInt {
    return this.value0;
  }

  get_contractAddress(): Address {
    return this.value1;
  }

  get_blockNumber(): BigInt {
    return this.value2;
  }

  get_blockTimestamp(): BigInt {
    return this.value3;
  }
}

export class SimpleTransferContract extends ethereum.SmartContract {
  static bind(address: Address): SimpleTransferContract {
    return new SimpleTransferContract("SimpleTransferContract", address);
  }

  recordTransfer(to: Address, value: BigInt, message: string): Bytes {
    let result = super.call(
      "recordTransfer",
      "recordTransfer(address,uint256,string):(bytes32)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromString(message)
      ]
    );

    return result[0].toBytes();
  }

  try_recordTransfer(
    to: Address,
    value: BigInt,
    message: string
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "recordTransfer",
      "recordTransfer(address,uint256,string):(bytes32)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromString(message)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  batchRecordTransfer(
    recipients: Array<Address>,
    values: Array<BigInt>,
    messages: Array<string>
  ): Array<Bytes> {
    let result = super.call(
      "batchRecordTransfer",
      "batchRecordTransfer(address[],uint256[],string[]):(bytes32[])",
      [
        ethereum.Value.fromAddressArray(recipients),
        ethereum.Value.fromUnsignedBigIntArray(values),
        ethereum.Value.fromStringArray(messages)
      ]
    );

    return result[0].toBytesArray();
  }

  try_batchRecordTransfer(
    recipients: Array<Address>,
    values: Array<BigInt>,
    messages: Array<string>
  ): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "batchRecordTransfer",
      "batchRecordTransfer(address[],uint256[],string[]):(bytes32[])",
      [
        ethereum.Value.fromAddressArray(recipients),
        ethereum.Value.fromUnsignedBigIntArray(values),
        ethereum.Value.fromStringArray(messages)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  totalRecords(): BigInt {
    let result = super.call("totalRecords", "totalRecords():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalRecords(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalRecords", "totalRecords():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userRecordCount(param0: Address): BigInt {
    let result = super.call(
      "userRecordCount",
      "userRecordCount(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_userRecordCount(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userRecordCount",
      "userRecordCount(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserRecordCount(user: Address): BigInt {
    let result = super.call(
      "getUserRecordCount",
      "getUserRecordCount(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_getUserRecordCount(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUserRecordCount",
      "getUserRecordCount(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getContractInfo(): SimpleTransferContract__getContractInfoResult {
    let result = super.call(
      "getContractInfo",
      "getContractInfo():(uint256,address,uint256,uint256)",
      []
    );

    return new SimpleTransferContract__getContractInfoResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_getContractInfo(): ethereum.CallResult<
    SimpleTransferContract__getContractInfoResult
  > {
    let result = super.tryCall(
      "getContractInfo",
      "getContractInfo():(uint256,address,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SimpleTransferContract__getContractInfoResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }
}

export class RecordTransferCall extends ethereum.Call {
  get inputs(): RecordTransferCall__Inputs {
    return new RecordTransferCall__Inputs(this);
  }

  get outputs(): RecordTransferCall__Outputs {
    return new RecordTransferCall__Outputs(this);
  }
}

export class RecordTransferCall__Inputs {
  _call: RecordTransferCall;

  constructor(call: RecordTransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get message(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class RecordTransferCall__Outputs {
  _call: RecordTransferCall;

  constructor(call: RecordTransferCall) {
    this._call = call;
  }

  get recordId(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class BatchRecordTransferCall extends ethereum.Call {
  get inputs(): BatchRecordTransferCall__Inputs {
    return new BatchRecordTransferCall__Inputs(this);
  }

  get outputs(): BatchRecordTransferCall__Outputs {
    return new BatchRecordTransferCall__Outputs(this);
  }
}

export class BatchRecordTransferCall__Inputs {
  _call: BatchRecordTransferCall;

  constructor(call: BatchRecordTransferCall) {
    this._call = call;
  }

  get recipients(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get values(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get messages(): Array<string> {
    return this._call.inputValues[2].value.toStringArray();
  }
}

export class BatchRecordTransferCall__Outputs {
  _call: BatchRecordTransferCall;

  constructor(call: BatchRecordTransferCall) {
    this._call = call;
  }

  get recordIds(): Array<Bytes> {
    return this._call.outputValues[0].value.toBytesArray();
  }
}
