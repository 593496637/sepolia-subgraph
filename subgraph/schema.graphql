"""
以太坊账户实体 - 代表区块链上的一个地址

🎯 核心功能：
- 存储账户基本信息和统计数据
- 建立与转账记录的关联关系
- 支持双向转账记录查询（发送和接收）
- 维护账户活动统计信息

📊 关系设计：
- 一对多关系：一个账户可以有多个发送的转账记录
- 一对多关系：一个账户可以有多个接收的转账记录
- 支持 GraphQL 的深度关联查询和反向查询

🔍 查询场景：
- 查询账户的所有转账历史（发送+接收）
- 统计账户的交易活跃度
- 分析账户间的资金流向关系
- 构建账户交易网络图谱
"""
type Account @entity(immutable: false) {
  "账户唯一标识符，使用以太坊地址的十六进制字符串"
  id: ID!
  
  "账户的以太坊地址，原始字节格式"
  address: Bytes!
  
  "该账户发送的所有转账记录，通过 from 字段自动关联"
  transferRecordsSent: [TransferRecord!]! @derivedFrom(field: "from")
  
  "该账户接收的所有转账记录，通过 to 字段自动关联"
  transferRecordsReceived: [TransferRecord!]! @derivedFrom(field: "to")
  
  "账户主动发起的转账次数统计，用于分析活跃度"
  recordCount: BigInt!
}

"""
转账记录实体 - 代表一次完整的转账操作

🎯 核心功能：
- 记录完整的转账事务信息
- 关联发送方和接收方账户
- 存储转账的元数据和上下文信息
- 提供转账的可追溯性和审计能力

📋 数据完整性：
- 不可变实体：一旦创建不可修改，确保数据完整性
- 唯一标识：使用交易哈希+日志索引保证唯一性
- 关联数据：与区块链原始数据保持一致性
- 时间戳记录：支持时间序列分析

🔗 关系模型：
- 多对一关系：多个转账记录关联到一个发送账户
- 多对一关系：多个转账记录关联到一个接收账户
- 支持复杂的多表关联查询

🌐 应用场景：
- 转账历史查询和分析
- 资金流向追踪和监控
- 交易模式识别和统计
- 合规性检查和风险评估
"""
type TransferRecord @entity(immutable: true) {
  "转账记录唯一标识符，格式：交易哈希-日志索引"
  id: ID!
  
  "智能合约生成的记录ID，用于与链上数据对应"
  recordId: Bytes!
  
  "转账发送方账户，关联到 Account 实体"
  from: Account!
  
  "转账接收方账户，关联到 Account 实体"
  to: Account!
  
  "转账金额，以 Wei 为单位的大整数"
  value: BigInt!
  
  "转账备注信息，支持 Unicode 字符和 Emoji"
  message: String!
  
  "转账时间戳，Unix 时间戳格式"
  timestamp: BigInt!
  
  "转账事件所在的区块号，用于排序和查询"
  blockNumber: BigInt!
  
  "转账事件所在的交易哈希，用于溯源和验证"
  transactionHash: Bytes!
}